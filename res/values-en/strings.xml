<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="show_messages_check">Show messages?</string>
    <string name="simulate_bluetooth_check">Simulate Bluetooth?</string>
    <string name="view_message_title_string">Title:</string>
    <string name="view_message_data_string">Message:</string>
    <string name="language_text">Language:</string>
    <string name="message_text">Message:</string>
    <string name="title_text">Title</string>
    <string name="app_name">Fluid Nexus</string>
    <string name="settings_title">Settings (Fluid Nexus)</string>
    <string name="message_view_title">View Message (Fluid Nexus)</string>
    <string name="help_title">Help + About (Fluid Nexus)</string>
    <string name="message_add_outgoing_title">Add Outgoing Message (Fluid Nexus)</string>
    <string name="message_view_outgoing_title">View Outgoing Messages (Fluid Nexus)</string>
    <string name="message_list_header_text_all">ALL MESSAGES</string>
    <string name="message_list_header_text_outgoing">OUTGOING MESSAGES</string>
    <string name="menu_add_message">Add Outgoing</string>
    <string name="menu_view_all">View All</string>
    <string name="menu_view_outgoing">View Outgoing</string>
    <string name="menu_delete">Delete Message</string>
    <string name="menu_settings">Settings</string>
    <string name="menu_help">Help + About</string>
    <string name="view_message_back">Back</string>
    <string name="save_message_button">Save</string>
    <string name="discard_message_button">Discard</string>
    <string name="settings_save_button">Save</string>
    <string name="settings_cancel_button">Cancel</string>
    <string name="button_help">Help</string>
    <string name="button_concept">Concept</string>
    <string name="button_return">Return</string>
    <string name="notification">Fluid Nexus Notification</string>
    <string name="notification_bluetooth">Fluid Nexus Bluetooth Notification</string>
    <string name="notification_title_new_message">New Message</string>
    <string name="notification_fluid_nexus_device_found">Fluid Nexus device found</string>
    <string name="notification_fluid_nexus_discovery_complete">Device discovery complete</string>
    <string name="notification_fluid_nexus_services_complete">Services discovery complete</string>
    <string name="notification_fluid_nexus_send_outgoing_complete">Sending outgoing message</string>
    <string name="toast_bluetooth_settings_changed">Bluetooth simulator       settings changed; please restart the emulator and Fluid Nexus.  If using the bridge, be sure it is running before you start Fluid Nexus in the emulator.</string>
    <string name="intent_new_message">org.zeitkunst.FluidNexus.NEW_MESSAGE</string>
    <string name="intent_discovery_started">org.zeitkunst.FluidNexus.DISCOVERY_STARTED</string>
    <string name="intent_device_found">org.zeitkunst.FluidNexus.REMOTE_DEVICE_FOUND</string>
    <string name="intent_discovery_completed">org.zeitkunst.FluidNexus.DISCOVERY_COMPLETED</string>
    <string name="intent_service_discovery_completed">org.zeitkunst.FluidNexus.SERVICE_DISCOVERY_COMPLETED</string>
    <string name="help_help_text">Fluid Nexus unfortunately only works in simulated mode right now, since the m5 version of the emulator does not support Bluetooth natively.  Read on for more details about the different types of Bluetooth simulation.\n
\n
HELP\n
\n
There are two types of messages in Fluid Nexus.  The first, \"outgoing\", are messages you have created and that are designed to be the first ones sent to other nearby phones.  These are indicated by the icon with the arrow pointing outside of the device.  The second are messages that you have received from other phones; these are indicated by the icon without the arrow.  Your phone will try and send these messages after it has sent all of the messages marked as outgoing.\n
\n
VIEWING A MESSAGE: Simply click/tap/hit enter on a message to open a window that allows you to see the entirety of the message.\n
DELETING A MESSAGE: Once you have selected a message using the keyboard or direction pad, open the menu and select \"Delete message\" to remove it from the database and advertisements.\n
ADDING A MESSAGE: Open the menu and select \"Add Outgoing\".  Enter your message, select save, and it will be queued for for sending, as well as appearing in your message list.\n
VIEW ALL MESSAGES: The default opening view of Fluid Nexus, this shows all of the messages on your device.  You can also return to this view by opening the menu and selecting \"View All\".\n
VIEW OUTGOING: This shows you only the messages you have created and that are thus marked as \"outgoing\".  You can select this by opening the menu and selecting \"View Outgoing\".\n
\n
Google Android port by Nick Knouf.\n
\n
Nokia Series 60 Python version by Nick Knouf with Bruno Vianna, Luis Ayuso, and Mónica Sánchez.\n
\n
Source code is available from http://fluidnexus.net and is licensed under the GPLv3.</string>
    <string name="help_concept_text">Fluid Nexus is an application for mobile phones that is primarily designed to enable activists or relief workers to send messages and data amongst themselves independent of a centralized cellular network.  The idea is to provide a means of communication between people when the centralized network has been shut down, either by the government during a time of unrest, or by nature due to a massive disaster.  During such times the use of the centralized network for voice or SMS is not possible.  Yet, if we can use the fact that people still must move about the world, then we can use ideas from sneaker-nets to turn people into carriers of data.  Given enough people, we can create fluid, temporary, ad-hoc networks that pass messages one person at a time, spreading out as a contagion and eventually reaching members of the group.  This enables surreptitious communication via daily activity and relies on a fluid view of reality.  Additionally, Fluid Nexus can be used as a hyperlocal message board, loosely attached to physical locations.\n
\n
For the purposes of this competition, I have simulated Bluetooth connections since the emulator does not at present support Bluetooth natively.  There are two different types of simulation.  The first is a purely software version that fires Bluetooth events for both the client and the server.  The second is a bridge that sits outside of the emulator and connects, over a forwarded TCP socket, the emulator to the host Bluetooth adapter.  This bridge is written in python using the lightblue library.  For the competition I show notifications for all device and service discovery, as well as for sending outgoing messages; in an actual application, these notifications would not be shown.
    </string>

</resources>
